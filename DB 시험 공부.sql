/*
- DBMS : 데이터베이스에서 데이터 추출, 조작, 정의, 제어 등을 할 수 있게 해주는 데이터베이스 전용 관리 프로그램

- SQL : 관계형 데이터베이스에서 데이터를 조회하거나 조작하기 위해 사용하는 표준 검색 언어
원하는 데이터를 찾는 방법이나 절차를 기술하는 것이 아닌 조건을 기술하여 작성

- DQL(SELECT)
데이터를 조회한 결과를 Result Set이라고 하는데 SELECT구문에 의해 조회된 행들의 집합을 의미.
Result Set은 0개 이상의 행이 포함될 수 있고 Result Set은 특정한 기준에 의해 정렬 가능.
한 테이블의 특정 컬럼, 특정 행, 특정 행/컬럼 또는 여러 테이블의 특정 행/컬럼 조회 가능

- DML(INSERT, UPDATE, DELETE)
DML이란 데이터 조작 언어로 테이블에 값을 삽입, 수정, 삭제하는 구문을 말함
INSERT : 테이블에 새로운 행을 추가하여 테이블의 행 개수를 증가시키는 구문
UPDATE : 테이블에 기록된 컬럼의 값을 수정하는 구문으로 테이블의 전체 행 개수에는 변화가 없음
DELETE : 테이블의 행을 삭제하는 구문으로 테이블의 행 개수가 줄어듦.

- DDL(CREATE, ALTER, DROP)
데이터 정의 언어로 객체(OBJECT)를 만들고(CREATE), 수정하고(ALTER), 삭제(DROP)하는 구문을 말함
CREATE : 테이블이나 인덱스, 뷰 등 데이터베이스 객체를 생성하는 구문
ALTER : 테이블에 정의된 내용을 수정할 때 사용하는 데이터 정의어
DROP : 테이블에 데이터를 삭제하는 구문

- DCL(GRANT, REVOKE)
DCL : 데이터를 다루기 위한 권한을 다루는 언어
GRANT : 계정에 DB, DB 객체에 대한 접근 권한을 부여(GRANT)하는 언어 
REVOKE: 계정에 DB, DB 객체에 대한 접근 권한을 회수(REVOKE)하는 언어

- TCL(COMMIT, ROLLBACK, SAVEPOINT)
TCL(TRANSACTION CONTROL LANGUAGE) : 트랜잭션 제어 언어
COMMIT(트랜잭션 종료 후 저장), ROLLBACK(트랜잭션 취소), SAVEPOINT(임시저장)
1) COMMIT : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 DB에 반영  
2) ROLLBACK : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을
삭제하고 마지막 COMMIT 상태로 돌아감. (DB에 변경 내용 반영 X)             
3) SAVEPOINT : 메모리 버퍼(트랜잭션)에 저장 지점을 정의하여 ROLLBACK 수행 시
전체 작업을 삭제하는 것이 아닌 저장 지점까지만 일부 ROLLBACK

- 트랜잭션
1. 데이터베이스의 논리적 연산 단위
2. 데이터 변경 사항을 묶어 하나의 트랜잭션에 담아 처리함.

- 데이터 딕셔너리
자원을 효율적으로 관리하기 위한 다양한 정보를 저장하는 시스템 테이블
데이터 딕셔너리는 사용자가 테이블을 생성하거나 사용자를 변경하는 등의
작업을 할 때 데이터베이스 서버에 의해 자동으로 갱신되는 테이블

- 제약조건
사용자가 원하는 조건의 데이터만 유지하기 위해서 특정 컬럼에 설정하는 제약.
데이터 무결성 보장을 목적으로 함.

> NOT NULL : 해당 컬럼에 반드시 값이 기록되어야 하는 경우 사용

> UNIQUE : 컬럼 입력 값에 대해 중복을 제한하는 제약조건

> PK : 테이블에서 한 행의 정보를 구분하기 위한 고유 식별자(Identifier)역할
NOT NULL의 의미와 UNIQUE의 의미를 둘 다 가지고 있으며 한 테이블 당 하나만 설정 가능
컬럼 레벨과 테이블 레벨 둘 다 지정 가능

> FK + 삭제 옵션 : 참조 무결성을 위한 제약조건으로 참조된 다른 테이블이 제공한 값만 사용하도록 제한을 거는 것
FOREIGN KEY 삭제 옵션 : 부모 테이블의 데이터 삭제 시 자식 테이블의 데이터를 어떤식으로 처리할 지에 대한 내용을 설정할 수 있다.

> CHECK : 해당 컬럼에 입력 되거나 수정되는 값을 체크하여 설정된 값 이외의 값이면 에러 발생
비교 연산자를 이용하여 조건을 설정하며 비교 값을 리터럴만 사용 가능하고
변하는 값이나 함수 사용은 불가능

- 관리자 계정, 사용자 계정
관리자 계정 : 데이터베이스의 생성과 관리를 담당하는 계정. 모든 권한과 책임을 가지는 계정.
사용자 계정 : 데이터베이스에 대하여 질의, 갱신, 보고서 작성 등의 작업을 수행할 수 있는 계정으로
업무에 필요한 최소한의 권한만을 가지는 것을 원칙으로 한다.

- 시스템 권한, 객체 권한, ROLE(CONNECT, RESORUCE)
시스템 권한 : DB접속, 객체 생성 권한
객체 권한 : 특정 객체를 조작할 수 있는 권한
ROLE(CONNECT) : DB 접속 관련 권한을 묶어둔 ROLE
ROLE(RESORUCE): DB 사용을 위한 기본 객체 생성 권한을 묶어둔 ROLE

- SELECT, INSERT, UPDATE, DELETE 작성법

> SELECT문

5: SELECT절 : 조회
1: FROM절 + JOIN : 참조할 테이블명
2: WHERE절 : 각 컬럼 값에 대한 조건을 나타낼 때 사용
3: GROUP BY절 : 같은 값들이 여러개 기록된 컬럼을 가지고 같은 값들을 하나의 그룹으로 묶음
4: HAVING절 : 그룹함수로 구해 올 그룹에 대한 조건을 설정할 때 사용
6: ORDER BY절 : SELECT문의 조회 결과(RESULT SET)를 정렬할 때 사용하는 구문

+ JOIN 방법(INNER, OUTER(LEFT, RIGHT))
내부 조인(INNER JOIN) ( == 등가 조인(EQUAL JOIN)) --> 연결되는 컬럼의 값이 일치하는 행들만 조인됨.
외부 조인(OUTER JOIN) : 두 테이블의 지정하는 컬럼값이 일치하지 않는 행도 조인에 포함을 시킴
LEFT [OUTER] JOIN  : 합치기에 사용한 두 테이블 중 왼편에 기술된 테이블의 컬럼 수를 기준으로 JOIN
RIGHT [OUTER] JOIN : 합치기에 사용한 두 테이블 중 오른편에 기술된 테이블의 컬럼 수를 기준으로 JOIN

+ 서브쿼리(단일행, 다중행, 다중열)
SUBQUERY : SELECT 문장 안에 포함된 또 다른 SELECT 문장으로 메인 쿼리가 실행되기 전 한 번만 실행됨
1. 단일행 서브쿼리 : 서브쿼리의 조회 결과 값의 개수가 1개인 서브쿼리
2. 다중행 서브쿼리 : 서브쿼리의 조회 결과 값의 행이 여러 개인 서브쿼리
3. 다중열 서브쿼리 : 서브쿼리의 조회 결과 컬럼의 개수가 여러 개인 서브쿼리

> INSERT문

1) 모든 컬럼 삽입
INSERT INTO 테이블명 VALUES(컬럼값, 컬럼값, ...);

2) 특정 컬럼 삽입(지정되지 않은 컬럼은 NULL 또는 DEFAULT 값 삽입)
INSERT INTO 테이블명(컬럼명, 컬럼명, ...)
VALUES (컬럼값, 컬럼값, ...);

3) 서브쿼리를 이용한 삽입
INSERT INTO 테이블명 (서브쿼리);

> UPDATE문

UPDATE 테이블명 SET
컬럼명 = 수정할 컬럼값 또는 (서브쿼리),
컬럼명 = 수정할 컬럼값 또는 (서브쿼리),
...
WHERE 조건문;

> DELETE문

DELETE FROM 테이블명
WHERE 조건문;

- CREATE TABLE 작성법 : CREATE TABLE 테이블명 (컬럼명 데이터타입);

> 데이터 타입 -> NUMBER : 숫자, CHAR : 고정길이문자 (최대 2000BYTE), VARCHAR2 : 가변길이문자 (최대 4000BYTE), DATE : 날짜

> 기본값 -> DEFAULT : DEFAULT 값으로 삽입

> 제약조건 작성법
-> 컬럼 레벨만 작성 가능 : NOT NULL
-> 컬럼, 테이블 레벨 모두 작성 가능 : PK, FK, UNIQUE, CHECK
(FK 제약조건은 레벨에 따라 작성법에 차이가 있음)

- VIEW, SEQUENCE 생성을 위한 기본 작성법 (옵션 X)
VIEW 생성 기본 작성법 : CREATE [OR REPLACE] VIEW 뷰이름 AS subquery;
SEQUENCE 생성 기본 작성법 : CREATE SEQUENCE 시퀀스이름;


*/