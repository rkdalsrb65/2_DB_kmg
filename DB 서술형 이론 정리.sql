/* 데이트베이스개요

DATA : 관찰 결과로 나타난 정량적 혹은 정성적인 실제 값

정보 : 데이터를 기반으로 의미를 부여한 것

DATABASE : 한 조직에 필요한 정보를 여러 응용 시스템에서 공용할 수 있도록
논리적으로 연관된 데이터를 모으고 중복되는 데이터를 최소화하여
구조적으로 통합/저장해놓은 것

DBMS : 데이터베이스에서 데이터 추출, 조작, 정의, 제어 등을 할 수 있게 해주는 데이터베이스 전용 관리 프로그램

DATABASE 유형
계층형 데이터베이스 : 트리 형태의 계층적 구조를 가진 데이터베이스로 최상위 계층의 데이터부터 검색하는 구조
네트워크형 데이터베이스 : 하위 데이터들끼리의 관계까지 정의할 수 있는 구조로 설계 및 구현이 복잡하고 어려움
관계형 데이터베이스 : 모든 데이터를 2차원 테이블 형태로 표현하고 테이블 사이의 비즈니스적 관계를 도출하는 구조
데이터의 중복을 최소화 할 수 있으며 업무 변화에 대한 적응력 우수

객체-관계형 데이터베이스
1. 사용자 정의 타입 지원
사용자가 임의로 정한 데이터 유형으로 기본형을 넘어 다양한 형태의 데이터를 다룰 수 있음
2. 참조(reference)타입 지원
객체들로 이루어진 객체 테이블의 경우 하나의 레코드가 다른 레코드를 참조할 수 있는 것
3. 중첩 테이블 지원
테이블을 구성하는 로우(row)자체가 또 다른 테이블로 구성되는 테이블을 지원하며
조금 더 복잡하고 복합적인 정보 표현 가능
4. 대단위 객체의 저장 및 추출 가능
이미지, 오디오, 비디오 등 저장하기 위한 대단위 객체(LOB) 지원
5. 객체간의 상속관계 지원
오라클의 경우 OBJECT타입을 지원함으로써 상속 기능을 구현하고 있음

--------------------------------------------

DML(SELECT)

SQL(Structured Query Language) : 관계형 데이터베이스에서 데이터를 조회하거나 조작하기 위해 사용하는 표준 검색 언어
원하는 데이터를 찾는 방법이나 절차를 기술하는 것이 아닌 조건을 기술하여 작성

SELECT : 데이터를 조회한 결과를 Result Set이라고 하는데 SELECT구문에 의해 조회된 행들의 집합을 의미.
Result Set은 0개 이상의 행이 포함될 수 있고 Result Set은 특정한 기준에 의해 정렬 가능.
한 테이블의 특정 컬럼, 특정 행, 특정 행/컬럼 또는 여러 테이블의 특정 행/컬럼 조회 가능

[SELECT 작성법]
SELECT 컬럼 명 [, 컬럼명, ...]
FROM 테이블 명
WHERE 조건식;

리터럴 = '' : 임의로 지정한 문자열을 SELECT절에 사용하면 테이블에 존재하는 데이터처럼 활용 가능
DISTINCT : 컬럼에 포함된 데이터 중 중복 값을 제외하고 한 번씩만 표시하고자 할 때 사용

연결 연산자 : ‘||’를 사용하여 여러 컬럼을 하나의 컬럼인 것처럼 연결하거나 컬럼과 리터럴을 연결함
논리 연산자 : 여러 개의 제한 조건 결과를 하나의 논리 결과로 만들어줌
비교 연산자 : 표현식 사이의 관계를 비교하기 위해 사용하고 비교 결과는 논리 결과(TRUE/FALSE/NULL) 중 하나가 됨
단 비교하는 두 컬럼 값/표현식은 서로 동일한 데이터 타입이어야 함
BETWEEN AND : 비교하려는 값이 지정한 범위에 포함되면 TRUE를 리턴하는 연산자로
상한 값과 하한 값의 경계도 포함됨
LIKE : 비교하려는 값이 지정한 특정 패턴을 만족하면 TRUE를 리턴하는 연산자로
‘%’와 ‘_’를 와일드카드로 사용

----------------------------------------------

함수(FUNCTION)

함수 : 하나의 큰 프로그램에서 반복적으로 사용되는 부분들을 분리하여 작성해 놓은 작은 서브 프로그램
호출하며 값을 전달하면 결과를 리턴하는 방식으로 사용

문자 처리 함수
LENGTH : 주어진 컬럼 값/문자열의 길이(문자 개수) 반환
INSTR : 지정한 위치부터 지정한 숫자 번째로 나타나는 문자의 시작 위치 반환
LTRIM/RTRIM : 주어진 컬럼, 문자열의 왼쪽/오른쪽에서 지정한 STR에 포함된 모든 문자를 제거한 나머지 반환
TRIM :  주어진 컬럼, 문자열의 앞/뒤/양쪽에 있는 지정한 문자를 제거한 나머지 반환
SUBSTR : 컬럼이나 문자열에서 지정한 위치부터 지정한 개수의 문자열을 잘라내어 반환
LPAD/RPAD : 주어진 컬럼, 문자열에 임의의 문자열을 왼쪽/오른쪽에 덧붙여 길이 N의 문자열 반환
LOWER/UPPER/INITCAP : 컬럼의 문자 혹은 문자열을 소문자/대문자/첫 글자만 대문자로 변환하여 반환

숫자 처리 함수
ABS : 인자로 전달 받은 숫자의 절대값 반환
MOD : 인자로 전달 받은 숫자를 나누어 나머지 반환
ROUND : 인자로 전달 받은 숫자 혹은 컬럼에서 지정한 위치부터 반올림하여 값 반환
FLOOR : 인자로 전달 받은 숫자 혹은 컬럼에서 소수점 자리의 수를 버림 후 반환
TRUNC : 인자로 전달 받은 숫자 혹은 컬럼에서 지정한 위치부터의 자리의 수를 버리고(절삭) 반환
CEIL : 인자로 전달 받은 숫자 혹은 컬럼을 올림 후 반환

날짜 처리 함수
SYSDATE : 시스템에 저장되어 있는 현재 날짜 반환
MONTHS_BETWEEN : 인자로 날짜 두 개를 전달받아 개월 수 차이를 숫자 데이터형으로 반환
ADD_MONTHS : 인자로 전달받은 날짜에 인자로 받은 숫자만큼 개월 수를 더하여 특정 날짜 반환
LAST_DAY : 인자로 전달받은 날짜가 속한 달의 마지막 날짜 반환
EXTRACT : 년, 월, 일 정보 추출하여 반환

형 변환 함수
TO_CHAR : 날짜 혹은 숫자형 데이터를 문자형 데이터로 변환하여 반환
TO_DATE : 숫자 혹은 문자형 데이터를 날짜형 데이터로 변환하여 반환
TO_NUMBER : 날짜 혹은 문자형 데이터를 숫자형 데이터로 변환하여 반환

NULL 처리 함수
NVL : NULL로 되어 있는 컬럼의 값을 인자로 지정한 숫자 혹은 문자로 변경하여 반환

선택 함수
DECODE : 비교하고자 하는 값 또는 컬럼이 조건식과 같으면 결과 값 반환
CASE : 비교하고자 하는 값 또는 컬럼이 조건식과 같으면 결과 값 반환(조건은 범위 값 가능)

그룹 함수
SUM : 해당 컬럼 값들의 총합 반환 (그룹의 누적 합계 반환)
AVG : 해당 컬럼 값들의 평균 반환 (그룹의 평균 반환)
COUNT : 테이블 조건을 만족하는 행의 개수 반환 (그룹의 총 개수 반환)
MAX : 그룹의 최대값 반환
MIN : 그룹의 최소값 반환

-----------------------------------------------------

GROUP BY & HAVING

ORDER BY
SELECT한 컬럼에 대해 정렬을 할 때 작성하는 구문으로
SELECT 구문의 가장 마지막에 작성하며 실행 순서 역시 가장 마지막에 수행됨

GROUP BY
그룹 함수는 단 한 개의 결과 값만 산출하기 때문에 그룹이 여러 개일 경우 오류 발생
여러 개의 결과 값을 산출하기 위해 그룹 함수가 적용될 그룹의 기준을 GROUP BY절에 기술하여 사용

HAVING
그룹 함수로 값을 구해올 그룹에 대해 조건을 설정할 때 HAVING절에 기술
(WHERE절은 각 컬럼 값에 대한 조건)

ROLLUP과 CUBE : 그룹 별 산출한 결과 값의 집계를 계산하는 함수
ROLLUP : 인자로 전달받은 그룹 중 가장 먼저 지정한 그룹별로 추가적 집계 결과 반환
CUBE : 인자로 지정된 그룹들로 가능한 모든 조합 별로 집계한 결과 반환

집합연산자 : 여러 개의 SELECT 결과물을 하나의 쿼리로 만드는 연산자
UNION : 여러 개의 쿼리 결과를 합치는 연산자로 중복된 영역은 제외하여 합침
INTERSECT : 여러 개의 SELECT 결과에서 공통된 부분만 결과로 추출(교집합)
UNION ALL : 여러 개의 쿼리 결과를 합치는 연산자로 중복된 영역 모두 포함하여 합침
MINUS : 선행 SELECT 결과에서 다음 SELECT 결과와 겹치는 부분을 제외한 나머지 부분 추출(차집합)

-------------------------------------------------------

JOIN (ANSI, 오라클 구문이 있다.)

JOIN
하나 이상의 테이블에서 데이터를 조회하기 위해 사용하고 수행 결과는 하나의 Result Set으로 나옴

CROSS JOIN
카테시안 곱(Cartesian Product)라고도 하며
조인되는 테이블의 각 행들이 모두 매핑된 데이터가 검색되는 조인 방법
검색되는 데이터 수는 ‘행의 컬럼 수 * 또 다른 행의 컬럼 수‘로 나옴

NON_EQU JOIN
지정한 컬럼 값이 일치하는 경우가 아닌 값의 범위에 포함되는 행들을 연결하는 방식

SELF JOIN
두 개 이상의 서로 다른 테이블을 연결하는 것이 아닌 같은 테이블을 조인하는 것

다중 JOIN
하나 이상의 테이블에서 데이터를 조회하기 위해 사용하고 수행 결과는 하나의 Result Set으로 나옴

---------------------------------------------------------

DML(Data Manipulation Language) '삽입(INSERT), 수정(UPDATE), 삭제(DELETE)'
DML이란 데이터 조작 언어로 테이블에 값을 삽입, 수정, 삭제하는 구문을 말함

INSERT : 테이블에 새로운 행을 추가하여 테이블의 행 개수를 증가시키는 구문

INSERT ALL : INSERT 시 서브쿼리가 사용하는 테이블이 같은 경우
두 개 이상의 테이블에 INSERT ALL을 이용하여 한 번에 삽입 가능
단, 각 서브쿼리의 조건절이 같아야 함

UPDATE : 테이블에 기록된 컬럼의 값을 수정하는 구문으로 테이블의 전체 행 개수에는 변화가 없음

MERGE : 구조가 같은 두 개의 테이블을 하나의 테이블로 합치는 기능 제공
두 테이블에서 지정하는 조건의 값이 존재하면 UPDATE되고 조건의 값이 없으면 INSERT 함

DELETE : 테이블의 행을 삭제하는 구문으로 테이블의 행 개수가 줄어듦.
삭제 시 FOREIGN KEY 제약조건으로 컬럼 삭제가 불가능한 경우 제약조건을 비활성화 할 수 있음

TRUNCATE : 테이블 전체 행 삭제 시 사용 하는 DDL로
DELETE보다 수행 속도가 빠르고 ROLLBACK을 통해 복구 불가능
또한 DELETE와 마찬가지로 FOREIGN KEY 제약조건일 때는 적용 불가능하기 때문에
제약 조건을 비활성화 해야 삭제할 수 있음

---------------------------------------------------------------

TCL(TRANSACTION CONTROL LANGUAGE) : 트랜잭션 제어 언어
COMMIT(트랜잭션 종료 후 저장), ROLLBACK(트랜잭션 취소), SAVEPOINT(임시저장)

TRANSACTION이란?
- 데이터베이스의 논리적 연산 단위
- 데이터 변경 사항을 묶어 하나의 트랜잭션에 담아 처리함.

1) COMMIT : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을 DB에 반영  
2) ROLLBACK : 메모리 버퍼(트랜잭션)에 임시 저장된 데이터 변경 사항을
삭제하고 마지막 COMMIT 상태로 돌아감. (DB에 변경 내용 반영 X)             
3) SAVEPOINT : 메모리 버퍼(트랜잭션)에 저장 지점을 정의하여 ROLLBACK 수행 시
전체 작업을 삭제하는 것이 아닌 저장 지점까지만 일부 ROLLBACK

-----------------------------------------------------------------

SUBQUERY(서브쿼리)

SUBQUERY : SELECT 문장 안에 포함된 또 다른 SELECT 문장으로 메인 쿼리가 실행되기 전 한 번만 실행됨
비교 연산자의 오른쪽에 기술해야 하며 반드시 괄호로 묶어야 함
서브쿼리와 비교할 항목은 반드시 서브쿼리의 SELECT한 항목의 개수와 자료형을 일치시켜야 함

1. 단일행 서브쿼리 : 서브쿼리의 조회 결과 값의 개수가 1개인 서브쿼리
2. 다중행 서브쿼리 : 서브쿼리의 조회 결과 값의 행이 여러 개인 서브쿼리
3. 다중열 서브쿼리 : 서브쿼리의 조회 결과 컬럼의 개수가 여러 개인 서브쿼리
4. 다중행 다중열 서브쿼리 : 서브쿼리의 조회 결과 컬럼의 개수와 행의 개수가 여러 개인 서브쿼리
5. 상(호연)관 서브쿼리 : 서브쿼리가 만든 결과 값을 메인 쿼리가 비교 연산할 때
메인 쿼리 테이블의 값이 변경되면 서브쿼리의 결과 값도 바뀌는 서브쿼리
6. 스칼라 서브쿼리 : 상관쿼리이면서 결과 값이 한 개인 서브쿼리

인라인 뷰 : FROM절에 서브쿼리 사용한 것

WITH : 서브쿼리에 이름을 붙여주고 인라인 뷰로 사용 시 서브쿼리의 이름으로 FROM절에 기술 가능
같은 서브쿼리가 여러 번 사용될 경우 중복 작성을 피할 수 있고 실행속도도 빨라진다는 장점이 있음

------------------------------------------------------------------

DDL(Data Definition Language)
데이터 정의 언어로 객체(OBJECT)를 만들고(CREATE), 수정하고(ALTER), 삭제(DROP)하는 구문을 말함

CREATE : 테이블이나 인덱스, 뷰 등 데이터베이스 객체를 생성하는 구문
ALTER : 테이블에 정의된 내용을 수정할 때 사용하는 데이터 정의어로
DROP : 테이블에 데이터를 삭제하는 구문

컬럼 주석 : 테이블의 컬럼에 주석을 다는 구문 [COMMENT ON COLUMN 테이블명.컬럼명 IS ‘주석 내용';]

제약 조건(CONSTRAINTS) : 테이블 작성 시 각 컬럼에 기록될 데이터에 대해 제약조건을 설정할 수 있는데
이는 데이터 무결성 보장을 주 목적으로 함
입력 데이터에 문제가 없는지에 대한 검사와 데이터의 수정/삭제 가능 여부 검사 등을 위해 사용

NOT NULL : 해당 컬럼에 반드시 값이 기록되어야 하는 경우 사용
UNIQUE : 컬럼 입력 값에 대해 중복을 제한하는 제약조건으로 컬럼 레벨과 테이블 레벨에 설정 가능

PRIMARY KEY : 테이블에서 한 행의 정보를 구분하기 위한 고유 식별자(Identifier)역할
NOT NULL의 의미와 UNIQUE의 의미를 둘 다 가지고 있으며 한 테이블 당 하나만 설정 가능
컬럼 레벨과 테이블 레벨 둘 다 지정 가능

FOREIGN KEY : 참조 무결성을 위한 제약조건으로 참조된 다른 테이블이 제공한 값만 사용하도록 제한을 거는 것

CHECK : 해당 컬럼에 입력 되거나 수정되는 값을 체크하여 설정된 값 이외의 값이면 에러 발생
비교 연산자를 이용하여 조건을 설정하며 비교 값을 리터럴만 사용 가능하고
변하는 값이나 함수 사용은 불가능

---------------------------------------------------------------

VIEW

----------------------------------------------------------------

SEQUENCE

----------------------------------------------------------------

INDEX

----------------------------------------------------------------









